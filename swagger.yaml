openapi: 3.0.0

info:
  title: Evolveum Day Off Planner API
  version: '1.0.0'

paths:

  /admin/setting/{key}:
    put:
      summary: Update setting with given key
      operationId: updateSetting
      tags:
        - admin
      parameters:
        - in: path
          name: key
          description: Key of the setting to be updated
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: New value of the setting
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingUpdateApiModel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingApiModel'
        '403':
          description: Not an admin
        '404':
          description: Not found

  /admin/user:
    post:
      summary: Create new user
      operationId: createUser
      tags:
        - admin
      requestBody:
        required: true
        description: Object of user to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateApiModel'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiModel'
        '403':
          description: Not an admin
        '409':
          description: Given email already exists

  /admin/user/{id}:
    delete:
      summary: Delete existing user
      operationId: deleteUser
      tags:
        - admin
      parameters:
        - in: path
          name: id
          description: ID of the user to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '403':
          description: Not an admin
        '404':
          description: Not found
    put:
      summary: Update existing user
      operationId: updateUser
      tags:
        - admin
      parameters:
        - in: path
          name: id
          description: ID of the user to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Object of user to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateApiModel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiModel'
        '403':
          description: Not an admin
        '404':
          description: Not found

  /admin/user/{userId}/limit/{leaveTypeId}:
    delete:
      summary: Delete user individual limit
      operationId: deleteLimit
      tags:
        - admin
      parameters:
        - in: path
          name: userId
          description: ID of the user
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: leaveTypeId
          description: ID of the leave type
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '403':
          description: Not an admin
        '404':
          description: Not found
    put:
      summary: Update user individual limit
      operationId: updateLimit
      tags:
        - admin
      parameters:
        - in: path
          name: userId
          description: ID of the user
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: leaveTypeId
          description: ID of the leave type
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Object of limit to be set
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LimitUpdateApiModel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitApiModel'
        '403':
          description: Not an admin
        '404':
          description: Not found

  /admin/leaveType:
    post:
      summary: Create new leave type
      operationId: createLeaveType
      tags:
        - admin
      requestBody:
        required: true
        description: Object of leave type to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveTypeCreateApiModel'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveTypeApiModel'
        '403':
          description: Not an admin
        '409':
          description: Given name already exists

  /admin/leaveType/{id}:
    delete:
      summary: Delete existing leave type
      operationId: deleteLeaveType
      tags:
        - admin
      parameters:
        - in: path
          name: id
          description: ID of the leave type to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '403':
          description: Not an admin
        '404':
          description: Not found
    put:
      summary: Update existing leave type
      operationId: updateLeaveType
      tags:
        - admin
      parameters:
        - in: path
          name: id
          description: ID of the leave type to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Object of leave type to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveTypeCreateApiModel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveTypeApiModel'
        '403':
          description: Not an admin
        '404':
          description: Not found

  /user/resetPassword:
    post:
      summary: Reset user password
      operationId: resetPassword
      tags:
        - user
      requestBody:
        required: true
        description: User email
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetApiModel'
      responses:
        '202':
          description: Accepted
        '404':
          description: Not found

  /user/changePassword:
    post:
      summary: Change user password
      operationId: changePassword
      tags:
        - user
      requestBody:
        required: true
        description: User old and new password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeApiModel'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid password

  /user/me:
    get:
      summary: Get currently logged user
      operationId: getLoggedUser
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiModel'

  /user/getAll:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserApiModel'

  /user/{id}:
    get:
      summary: Get user by ID
      operationId: getUserById
      tags:
        - user
      parameters:
        - in: path
          name: id
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiModel'
        '404':
          description: Not found

  /user/{id}/isApprover:
    get:
      summary: Get if user with given ID is approver/supervisor of some other user
      operationId: isApprover
      tags:
        - user
      parameters:
        - in: path
          name: id
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        '404':
          description: Not found

  /user/{userId}/limit:
    get:
      summary: Get all user individual limit
      operationId: getAllLimits
      tags:
        - user
      parameters:
        - in: path
          name: userId
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LimitApiModel'
        '404':
          description: Not found

  /user/{userId}/limit/{leaveTypeId}:
    get:
      summary: Get user individual limit
      operationId: getLimit
      tags:
        - user
      parameters:
        - in: path
          name: userId
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: leaveTypeId
          description: ID of the leave type
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitApiModel'
        '404':
          description: Not found

  /user/{userId}/carryover:
    get:
      summary: Get user carryovers for specified year
      operationId: getAllCarryovers
      tags:
        - user
      parameters:
        - in: path
          name: userId
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: year
          description: Year (current year if not specified)
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarryoverApiModel'
        '404':
          description: Not found

  /user/{userId}/carryover/{leaveTypeId}:
    get:
      summary: Get user carryover for specified leave type and year
      operationId: getCarryover
      tags:
        - user
      parameters:
        - in: path
          name: userId
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: leaveTypeId
          description: ID of the leave type
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: year
          description: Year (current year if not specified)
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarryoverApiModel'
        '404':
          description: Not found

  /user/{userId}/requestedHours/{leaveTypeId}:
    get:
      summary: Get user requested hours for specified leave type and year
      operationId: getRequestedHours
      tags:
        - user
      parameters:
        - in: path
          name: userId
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: leaveTypeId
          description: ID of the leave type
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: year
          description: Year (current year if not specified)
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestedHoursApiModel'
        '404':
          description: Not found

  /leaveType/getAll:
    get:
      summary: Get all leave types
      operationId: getAllLeaveTypes
      tags:
        - leaveType
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaveTypeApiModel'

  /leaveType/{id}:
    get:
      summary: Get leave type by ID
      operationId: getLeaveTypeById
      tags:
        - leaveType
      parameters:
        - in: path
          name: id
          description: Leave type ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveTypeApiModel'
        '404':
          description: Not found

  /leave:
    post:
      summary: Create new leave request
      operationId: createLeaveRequest
      tags:
        - leave
      requestBody:
        required: true
        description: Object of leave request to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveRequestCreateApiModel'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveRequestApiModel'

  /leave/filter:
    get:
      summary: Filter leave requests
      operationId: filterLeaveRequests
      tags:
        - leave
      parameters:
        - in: query
          name: from
          description: From date
          schema:
            type: string
            format: date
        - in: query
          name: to
          description: To date
          schema:
            type: string
            format: date
        - in: query
          name: status
          description: List of statuses to include in result (all if not set)
          schema:
            type: array
            items:
              type: string
              enum: [APPROVED, REJECTED, PENDING, CANCELLED]
        - in: query
          name: users
          description: List of users to include in result (all if not set)
          schema:
            type: array
            items:
              type: string
              format: uuid
        - in: query
          name: leaveTypes
          description: List of leave types to include in result (all if not set)
          schema:
            type: array
            items:
              type: string
              format: uuid
        - in: query
          name: approvers
          description: List of approvers to include in result (all if not set)
          schema:
            type: array
            items:
              type: string
              format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaveRequestApiModel'

  /leave/{id}:
    get:
      summary: Get leave request by ID
      operationId: getLeaveRequestById
      tags:
        - leave
      parameters:
        - in: path
          name: id
          description: Leave request ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveRequestApiModel'
        '404':
          description: Not found

  /leave/{id}/approvals:
    get:
      summary: Get leave request with approvals by ID
      operationId: getLeaveRequestByIdWithApprovals
      tags:
        - leave
      parameters:
        - in: path
          name: id
          description: Leave request ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveRequestWithApprovalsApiModel'
        '403':
          description: Only approvers can see approvals
        '404':
          description: Not found

  /leave/{id}/cancel:
    post:
      summary: Cancel leave request with given ID
      operationId: cancelLeaveRequest
      tags:
        - leave
      parameters:
        - in: path
          name: id
          description: Leave request ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveRequestApiModel'
        '403':
          description: Only requesting user can cancel
        '404':
          description: Not found

  /leave/{id}/message:
    post:
      summary: Add a message to leave request with given ID
      operationId: addMessage
      tags:
        - leave
      parameters:
        - in: path
          name: id
          description: Leave request ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        description: Message to be added to leave request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaveRequestAddMessageApiModel'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveRequestWithApprovalsApiModel'

  /leave/{id}/approve:
    post:
      summary: Approve/reject leave request with given ID
      operationId: approveLeaveRequest
      tags:
        - leave
      parameters:
        - in: path
          name: id
          description: Leave request ID
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: approve
          description: Whether to approve (true) or reject (false) leave request
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveRequestWithApprovalsApiModel'
        '403':
          description: Only approvers / already voted
        '404':
          description: Not found

  /leave/{id}/forceApprove:
    post:
      summary: FORCE approve/reject leave request with given ID (only supervisor)
      operationId: forceApproveLeaveRequest
      tags:
        - leave
      parameters:
        - in: path
          name: id
          description: Leave request ID
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: approve
          description: Whether to approve (true) or reject (false) leave request
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaveRequestWithApprovalsApiModel'
        '403':
          description: Only supervisor can force approve
        '404':
          description: Not found

  /setting/getAll:
    get:
      summary: Get all settings
      operationId: getAllSettings
      tags:
        - setting
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SettingApiModel'

  /login:
    post:
      summary: Log user into the system
      operationId: loginUser
      tags:
        - auth
      requestBody:
        required: true
        description: Email and password for login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginApiModel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponseApiModel'
        '401':
          description: Invalid email or password

  /logout:
    post:
      summary: Log user out
      operationId: logoutUser
      tags:
        - auth
      responses:
        '200':
          description: OK
        '401':
          description: Invalid access token

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    ErrorApiModel:
      type: object
      required:
        - timestamp
        - status
        - error
        - message
        - path
      properties:
        timestamp:
          type: string
          format: date-time
          readOnly: true
        status:
          type: integer
          readOnly: true
        error:
          type: string
          readOnly: true
        message:
          type: string
          readOnly: true
        path:
          type: string
          readOnly: true

    SettingApiModel:
      type: object
      required:
        - key
        - description
        - value
      properties:
        key:
          type: string
          readOnly: true
        description:
          type: string
          readOnly: true
        value:
          type: integer
          readOnly: true
        min:
          type: integer
          readOnly: true
        max:
          type: integer
          readOnly: true

    SettingUpdateApiModel:
      type: object
      required:
        - value
      properties:
        value:
          type: integer

    UserApiModel:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - admin
        - jobDescription
        - approvers
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          type: string
          readOnly: true
        lastName:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        supervisor:
          type: string
          format: uuid
          readOnly: true
        admin:
          type: boolean
          default: false
          readOnly: true
        jobDescription:
          type: string
          readOnly: true
        phone:
          type: string
          readOnly: true
        approvers:
          type: array
          items:
            type: string
            format: uuid
          readOnly: true

    UserCreateApiModel:
      type: object
      required:
        - firstName
        - lastName
        - email
        - admin
        - jobDescription
        - approvers
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        supervisor:
          type: string
          format: uuid
        admin:
          type: boolean
          default: false
        jobDescription:
          type: string
        phone:
          type: string
        approvers:
          type: array
          items:
            type: string
            format: uuid

    UserLoginApiModel:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserLoginResponseApiModel:
      type: object
      required:
        - token
        - expiresAt
        - tokenType
        - user
      properties:
        token:
          type: string
          readOnly: true
        expiresAt:
          type: string
          format: date-time
          readOnly: true
        tokenType:
          type: string
          readOnly: true
        user:
          $ref: '#/components/schemas/UserApiModel'

    PasswordResetApiModel:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    PasswordChangeApiModel:
      type: object
      required:
        - oldPassword
        - newPassword
      properties:
        oldPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password

    LeaveTypeApiModel:
      type: object
      required:
        - id
        - name
        - color
        - approvalNeeded
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          readOnly: true
        color:
          type: string
          readOnly: true
        approvalNeeded:
          type: boolean
          default: false
          readOnly: true
        limit:
          type: integer
          readOnly: true
        carryover:
          type: integer
          readOnly: true

    LeaveTypeCreateApiModel:
      type: object
      required:
        - name
        - color
        - approvalNeeded
      properties:
        name:
          type: string
        color:
          type: string
        approvalNeeded:
          type: boolean
          default: false
        limit:
          type: integer
        carryover:
          type: integer

    LimitApiModel:
      type: object
      required:
        - user
        - leaveType
        - limit
      properties:
        user:
          type: string
          format: uuid
          readOnly: true
        leaveType:
          type: string
          format: uuid
          readOnly: true
        limit:
          type: integer
          readOnly: true

    LimitUpdateApiModel:
      type: object
      required:
        - limit
      properties:
        limit:
          type: integer

    CarryoverApiModel:
      type: object
      required:
        - user
        - leaveType
        - year
        - carryover
      properties:
        user:
          type: string
          format: uuid
          readOnly: true
        leaveType:
          type: string
          format: uuid
          readOnly: true
        year:
          type: integer
          readOnly: true
        carryover:
          type: integer
          readOnly: true

    RequestedHoursApiModel:
      type: object
      required:
        - user
        - leaveType
        - year
        - requestedHours
      properties:
        user:
          type: string
          format: uuid
          readOnly: true
        leaveType:
          type: string
          format: uuid
          readOnly: true
        year:
          type: integer
          readOnly: true
        requestedHours:
          type: integer
          readOnly: true

    LeaveRequestApiModel:
      type: object
      required:
        - id
        - leaveType
        - user
        - fromDate
        - toDate
        - status
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        leaveType:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          format: uuid
          readOnly: true
        fromDate:
          type: string
          format: date-time
          readOnly: true
        toDate:
          type: string
          format: date-time
          readOnly: true
        status:
          type: string
          enum: [APPROVED, REJECTED, PENDING, CANCELLED]
          readOnly: true

    LeaveRequestWithApprovalsApiModel:
      type: object
      required:
        - leaveRequest
        - approvals
      properties:
        leaveRequest:
          $ref: '#/components/schemas/LeaveRequestApiModel'
        approvals:
          type: array
          items:
            $ref: '#/components/schemas/LeaveRequestApprovalApiModel'
          readOnly: true
        messages:
          type: array
          items:
            $ref: '#/components/schemas/LeaveRequestMessageApiModel'
          readOnly: true

    LeaveRequestCreateApiModel:
      type: object
      required:
        - leaveType
        - fromDate
        - toDate
      properties:
        leaveType:
          type: string
          format: uuid
        fromDate:
          type: string
          format: date-time
        toDate:
          type: string
          format: date-time

    LeaveRequestApprovalApiModel:
      type: object
      required:
        - leaveRequest
        - approver
      properties:
        leaveRequest:
          type: string
          format: uuid
          readOnly: true
        approver:
          type: string
          format: uuid
          readOnly: true
        approved:
          type: boolean
          readOnly: true

    LeaveRequestAddMessageApiModel:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    LeaveRequestMessageApiModel:
      type: object
      required:
        - leaveRequest
        - approver
        - message
        - timestamp
      properties:
        leaveRequest:
          type: string
          format: uuid
          readOnly: true
        approver:
          type: string
          format: uuid
          readOnly: true
        message:
          type: string
          readOnly: true
        timestamp:
          type: string
          format: date-time
          readOnly: true

security:
  - bearerAuth: []